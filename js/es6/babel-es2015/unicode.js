// es6 加强了对unicode表示法 正则表达式的u模式来匹配码点，也提供新的API去处理21位码点（code points）
// 这些特性允许我们使用js构建国际化应用
//

// JavaScript允许采用\uxxxx形式表示一个字符，其中“xxxx”表示字符的码点。
// 但是，这种表示法只限于\u0000——\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达。
// "\uD842\uDFB7"
// "𠮷"

// "\u20BB7"
// " 7"

// 上面代码表示，如果直接在“\u”后面跟上超过0xFFFF的数值（比如\u20BB7），
// JavaScript会理解成“\u20BB+7”。由于\u20BB是一个不可打印字符，所以只会显示一个空格，后面跟着一个7。
// ES6对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。

// "𠮷"
"\u{20BB7}"


// 和ES5.1相同
"𠮷".length == 2

// 正则表达式新的u模式
"𠮷".match(/./u)[0].length == 2

// 新的unicode表示法
"\u{20BB7}" == "𠮷" == "\uD842\uDFB7"

// 新的字符串方法
"𠮷".codePointAt(0) == 0x20BB7

// for of迭代码点
for(var c of "𠮷") {
    console.log(c);
}